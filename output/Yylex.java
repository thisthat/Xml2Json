/* The following code was generated by JFlex 1.4.3 on 16/01/15 17.49 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2000 Gerwin Klein <lsf@jflex.de>                          *
 * All rights reserved.                                                    *
 *                                                                         *
 * Thanks to Larry Bell and Bob Jamison for suggestions and comments.      *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/01/15 17.49 from the specification file
 * <tt>calc.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\1\2\0\1\2\22\0\1\50\1\11\1\44\4\0"+
    "\1\44\4\0\1\47\2\46\1\43\12\46\1\0\1\46\1\3\1\45"+
    "\1\10\1\4\1\0\2\46\1\14\1\12\1\20\11\46\1\13\1\17"+
    "\3\46\1\15\4\46\1\16\7\46\1\30\1\21\1\27\1\24\1\25"+
    "\1\35\1\40\1\36\1\26\1\46\1\23\1\7\1\6\1\32\1\22"+
    "\1\33\1\46\1\34\1\37\1\31\1\41\1\46\1\42\1\5\2\46"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\6\3\1\5"+
    "\1\6\1\7\1\10\17\0\1\11\2\3\1\12\3\3"+
    "\35\0\5\3\1\0\1\13\1\14\7\0\1\15\4\0"+
    "\1\16\21\0\1\17\3\3\1\20\1\21\1\0\1\22"+
    "\1\0\1\23\1\24\3\0\1\25\1\26\3\0\1\27"+
    "\1\30\6\0\1\31\4\0\1\32\2\0\2\3\1\33"+
    "\4\0\1\34\3\0\1\35\1\0\1\36\1\37\3\0"+
    "\1\40\1\41\3\0\2\3\5\0\1\42\4\0\1\43"+
    "\3\0\1\44\1\45\2\0\1\46\1\0\1\47\1\50"+
    "\4\0\1\51\1\0\1\52\3\0\1\53\1\0\1\54"+
    "\1\55\4\0\1\56\3\0\1\57\1\60\1\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\173\0\244\0\315\0\51"+
    "\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\51\0\51"+
    "\0\51\0\u01ec\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2"+
    "\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\51\0\u047c\0\u04a5\0\315\0\u04ce\0\u04f7\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\51\0\51\0\u0ae4\0\u0b0d\0\u0b36"+
    "\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\51\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\51\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\315\0\u0f60\0\u0f89\0\u0fb2\0\315"+
    "\0\51\0\u0fdb\0\51\0\u1004\0\51\0\51\0\u102d\0\u1056"+
    "\0\u107f\0\51\0\51\0\u10a8\0\u10d1\0\u10fa\0\51\0\51"+
    "\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\51\0\u1219"+
    "\0\u1242\0\u126b\0\u1294\0\51\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\315\0\u1361\0\u138a\0\u13b3\0\u13dc\0\51\0\u1405\0\u142e"+
    "\0\u1457\0\51\0\u1480\0\51\0\51\0\u14a9\0\u14d2\0\u14fb"+
    "\0\51\0\51\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\51\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\51\0\u1762\0\u178b\0\u17b4\0\315\0\315\0\u17dd"+
    "\0\u1806\0\51\0\u182f\0\51\0\51\0\u1858\0\u1881\0\u18aa"+
    "\0\u18d3\0\51\0\u18fc\0\51\0\u1925\0\u194e\0\u1977\0\51"+
    "\0\u19a0\0\51\0\51\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\51"+
    "\0\u1a6d\0\u1a96\0\u1abf\0\51\0\51\0\u1ae8\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\7\1\10\1\2"+
    "\7\7\1\11\3\7\1\12\1\13\1\14\1\7\1\15"+
    "\1\7\1\16\7\7\1\17\1\20\1\21\1\7\1\2"+
    "\1\22\52\0\1\3\53\0\1\23\2\0\1\24\1\0"+
    "\1\25\7\0\1\26\2\0\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\0\1\40"+
    "\3\0\1\41\15\0\1\42\45\0\3\7\2\0\31\7"+
    "\3\0\2\7\6\0\3\7\2\0\10\7\1\43\20\7"+
    "\3\0\2\7\6\0\3\7\2\0\12\7\1\44\16\7"+
    "\3\0\2\7\6\0\3\7\2\0\12\7\1\45\16\7"+
    "\3\0\2\7\6\0\3\7\2\0\16\7\1\46\12\7"+
    "\3\0\2\7\6\0\3\7\2\0\14\7\1\47\14\7"+
    "\3\0\2\7\6\0\3\7\2\0\16\7\1\50\12\7"+
    "\3\0\2\7\51\0\1\22\5\0\1\51\65\0\1\52"+
    "\40\0\1\53\60\0\1\54\53\0\1\55\54\0\1\56"+
    "\44\0\1\57\10\0\1\60\53\0\1\61\31\0\1\62"+
    "\5\0\1\63\42\0\1\64\56\0\1\65\3\0\1\66"+
    "\36\0\1\67\54\0\1\70\47\0\1\71\32\0\1\72"+
    "\11\0\1\73\2\0\1\74\1\0\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\0\1\105\16\0"+
    "\3\7\2\0\10\7\1\106\20\7\3\0\2\7\6\0"+
    "\3\7\2\0\14\7\1\107\14\7\3\0\2\7\6\0"+
    "\3\7\2\0\21\7\1\110\7\7\3\0\2\7\6\0"+
    "\3\7\2\0\17\7\1\111\11\7\3\0\2\7\6\0"+
    "\3\7\2\0\17\7\1\112\11\7\3\0\2\7\7\0"+
    "\1\113\73\0\1\114\3\0\1\115\26\0\1\116\57\0"+
    "\1\117\52\0\1\120\51\0\1\121\32\0\1\122\71\0"+
    "\1\123\51\0\1\124\46\0\1\125\42\0\1\126\60\0"+
    "\1\127\53\0\1\130\41\0\1\131\65\0\1\132\46\0"+
    "\1\133\37\0\1\134\43\0\1\135\50\0\1\136\53\0"+
    "\1\137\54\0\1\140\44\0\1\141\10\0\1\142\53\0"+
    "\1\143\31\0\1\144\5\0\1\145\42\0\1\146\56\0"+
    "\1\147\3\0\1\150\36\0\1\151\54\0\1\152\47\0"+
    "\1\153\30\0\3\7\2\0\11\7\1\154\17\7\3\0"+
    "\2\7\6\0\3\7\2\0\17\7\1\155\11\7\3\0"+
    "\2\7\6\0\3\7\2\0\17\7\1\156\11\7\3\0"+
    "\2\7\6\0\2\7\1\157\2\0\31\7\3\0\2\7"+
    "\6\0\3\7\2\0\24\7\1\160\4\7\3\0\2\7"+
    "\10\0\1\161\55\0\1\162\57\0\1\163\53\0\1\164"+
    "\30\0\1\165\51\0\1\166\74\0\1\167\53\0\1\170"+
    "\21\0\1\171\66\0\1\172\54\0\1\173\54\0\1\174"+
    "\54\0\1\175\40\0\1\176\50\0\1\177\3\0\1\200"+
    "\35\0\1\201\52\0\1\202\51\0\1\203\32\0\1\204"+
    "\71\0\1\205\51\0\1\206\46\0\1\207\42\0\1\210"+
    "\60\0\1\211\53\0\1\212\41\0\1\213\65\0\1\214"+
    "\46\0\1\215\37\0\1\216\26\0\3\7\2\0\14\7"+
    "\1\217\14\7\3\0\2\7\6\0\3\7\2\0\14\7"+
    "\1\220\14\7\3\0\2\7\6\0\3\7\2\0\13\7"+
    "\1\221\15\7\3\0\2\7\16\0\1\222\62\0\1\223"+
    "\52\0\1\224\41\0\1\225\53\0\1\226\53\0\1\227"+
    "\54\0\1\230\42\0\1\231\45\0\1\232\53\0\1\233"+
    "\30\0\1\234\51\0\1\235\74\0\1\236\53\0\1\237"+
    "\21\0\1\240\66\0\1\241\54\0\1\242\54\0\1\243"+
    "\54\0\1\244\40\0\1\245\24\0\3\7\2\0\10\7"+
    "\1\246\20\7\3\0\2\7\6\0\3\7\2\0\10\7"+
    "\1\247\20\7\3\0\2\7\17\0\1\250\62\0\1\251"+
    "\45\0\1\252\57\0\1\253\43\0\1\254\46\0\1\255"+
    "\45\0\1\256\55\0\1\257\52\0\1\260\41\0\1\261"+
    "\53\0\1\262\53\0\1\263\54\0\1\264\42\0\1\265"+
    "\27\0\3\7\2\0\20\7\1\266\10\7\3\0\2\7"+
    "\6\0\3\7\2\0\20\7\1\267\10\7\3\0\2\7"+
    "\20\0\1\270\62\0\1\271\53\0\1\272\46\0\1\273"+
    "\43\0\1\274\55\0\1\275\46\0\1\276\45\0\1\277"+
    "\57\0\1\300\43\0\1\301\46\0\1\302\45\0\1\303"+
    "\46\0\1\304\56\0\1\305\44\0\1\306\57\0\1\307"+
    "\53\0\1\310\46\0\1\311\43\0\1\312\55\0\1\313"+
    "\40\0\1\314\57\0\1\315\45\0\1\316\44\0\1\317"+
    "\60\0\1\320\43\0\1\321\45\0\1\322\57\0\1\323"+
    "\56\0\1\324\43\0\1\325\43\0\1\326\62\0\1\327"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6929];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\6\1\3\11\1\1\17\0"+
    "\1\11\6\1\35\0\5\1\1\0\2\11\7\0\1\11"+
    "\4\0\1\11\21\0\5\1\1\11\1\0\1\11\1\0"+
    "\2\11\3\0\2\11\3\0\2\11\6\0\1\11\4\0"+
    "\1\11\2\0\3\1\4\0\1\11\3\0\1\11\1\0"+
    "\2\11\3\0\2\11\3\0\2\1\5\0\1\11\4\0"+
    "\1\11\3\0\2\1\2\0\1\11\1\0\2\11\4\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\2\11\4\0"+
    "\1\11\3\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	//DEBUG
	private boolean _DEBUG_ = false;

  private Parser yyparser;

  //To take care about line number in error reporting 
  //Public to let the parser see the token line
  public int _line_cnt = 1;

  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return Parser.OPEN_ROW;
          }
        case 50: break;
        case 3: 
          { if(this._DEBUG_){System.out.println(yytext()); } yyparser.yylval = new ParserVal(yytext()); return Parser.VALUE;
          }
        case 51: break;
        case 10: 
          { return Parser.ID;
          }
        case 52: break;
        case 24: 
          { return Parser.CLOSE_LOF;
          }
        case 53: break;
        case 20: 
          { return Parser.OPEN_CELL;
          }
        case 54: break;
        case 19: 
          { return Parser.OPEN_ITEM;
          }
        case 55: break;
        case 17: 
          { return Parser.OPEN_HEADER;
          }
        case 56: break;
        case 12: 
          { return Parser.OPEN_LOF;
          }
        case 57: break;
        case 48: 
          { return Parser.CLOSE_DEDICATION;
          }
        case 58: break;
        case 2: 
          { _line_cnt++;
          }
        case 59: break;
        case 29: 
          { return Parser.CLOSE_BOOK;
          }
        case 60: break;
        case 34: 
          { return Parser.OPEN_FIGURE;
          }
        case 61: break;
        case 28: 
          { return Parser.OPEN_TABLE;
          }
        case 62: break;
        case 7: 
          { return Parser.EQUAL;
          }
        case 63: break;
        case 16: 
          { return Parser.PATH;
          }
        case 64: break;
        case 32: 
          { return Parser.CLOSE_NOTE;
          }
        case 65: break;
        case 25: 
          { return Parser.CLOSE_TOC;
          }
        case 66: break;
        case 44: 
          { return Parser.CLOSE_PREFACE;
          }
        case 67: break;
        case 4: 
          { return Parser.CLOSE;
          }
        case 68: break;
        case 37: 
          { return Parser.CAPTION;
          }
        case 69: break;
        case 33: 
          { return Parser.CLOSE_PART;
          }
        case 70: break;
        case 13: 
          { return Parser.OPEN_TOC;
          }
        case 71: break;
        case 42: 
          { return Parser.OPEN_DOCTIPE;
          }
        case 72: break;
        case 39: 
          { return Parser.OPEN_PREFACE;
          }
        case 73: break;
        case 18: 
          { return Parser.OPEN_BOOK;
          }
        case 74: break;
        case 15: 
          { return Parser.BOOK;
          }
        case 75: break;
        case 35: 
          { return Parser.CLOSE_TABLE;
          }
        case 76: break;
        case 9: 
          { return Parser.CLOSE_HEADER;
          }
        case 77: break;
        case 23: 
          { return Parser.CLOSE_LOT;
          }
        case 78: break;
        case 21: 
          { return Parser.OPEN_NOTE;
          }
        case 79: break;
        case 11: 
          { return Parser.OPEN_LOT;
          }
        case 80: break;
        case 22: 
          { return Parser.OPEN_PART;
          }
        case 81: break;
        case 41: 
          { return Parser.CLOSE_FIGURE;
          }
        case 82: break;
        case 47: 
          { return Parser.OPEN_AUTHOR;
          }
        case 83: break;
        case 45: 
          { return Parser.CLOSE_SECTION;
          }
        case 84: break;
        case 40: 
          { return Parser.OPEN_SECTION;
          }
        case 85: break;
        case 46: 
          { return Parser.OPEN_DEDICATION;
          }
        case 86: break;
        case 27: 
          { return Parser.TITLE;
          }
        case 87: break;
        case 43: 
          { return Parser.CLOSE_CHAPTER;
          }
        case 88: break;
        case 1: 
          { System.err.println("Error: unexpected character '"+yytext()+"' @" + _line_cnt ); return -1;
          }
        case 89: break;
        case 31: 
          { return Parser.CLOSE_CELL;
          }
        case 90: break;
        case 5: 
          { return Parser.SLASH;
          }
        case 91: break;
        case 30: 
          { return Parser.CLOSE_ITEM;
          }
        case 92: break;
        case 36: 
          { return Parser.EDITION;
          }
        case 93: break;
        case 38: 
          { return Parser.OPEN_CHAPTER;
          }
        case 94: break;
        case 26: 
          { return Parser.CLOSE_ROW;
          }
        case 95: break;
        case 6: 
          { return Parser.QUOTE;
          }
        case 96: break;
        case 49: 
          { return Parser.CLOSE_AUTHOR;
          }
        case 97: break;
        case 8: 
          { 
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
